; -----------
;   Builtin
; -----------

; The famous Alethe cl
(declare-const @cl (-> Bool Bool Bool) :right-assoc-nil false)
; TODO: some better way to deal with empty clauses?
(declare-const @empty_cl Bool)

(declare-parameterized-const ite ((A Type :implicit)) (-> Bool A A A))
(declare-const not (-> Bool Bool))
(declare-const or (-> Bool Bool Bool) :right-assoc-nil false)
(declare-const and (-> Bool Bool Bool) :right-assoc-nil true)
(declare-const => (-> Bool Bool Bool) :right-assoc)
(declare-const xor (-> Bool Bool Bool) :left-assoc)
(declare-parameterized-const = ((A Type :implicit)) (-> A A Bool) 
                             :chainable and)
(declare-parameterized-const distinct ((A Type :implicit)) (-> A A Bool) 
                             :pairwise and)

; ---------------------------
;   Int and Real Arithmetic
; ---------------------------

(declare-type Int ())
(declare-type Real ())

(declare-consts <numeral> Int)
(declare-consts <rational> Real)
; TODO: to solve weird behavior with decimal numbers beings translated into
; rational, during parsing
(declare-consts <decimal> Real)

; NOTE: Arithmetic here is handled in the same way as it is handled
; for cvc5: Real and Int can be mixed, and the return type of arithmetic
; operators the Real, except for operations on Int only.  This could be
; made stronger, since Alethe does not mix those types.

; arith_typeunion
;   @param x a type
;   @param y a Type
;   @return the "union" of x and y.
; The returned type is the type of the result of mixed arithmetic operators taking arguments x and y.
(program $arith_typeunion ()
    (Type Type) Type
    (
      (($arith_typeunion Int Int) Int)
      (($arith_typeunion Real Real) Real)
      (($arith_typeunion Real Int) Real)
      (($arith_typeunion Int Real) Real)
    )
)

; is_arith_type
;   @param x
;   @returns true if x is Int or Real
(program $is_arith_type ()
    (Type) Bool
    (
      (($is_arith_type Int) true)
      (($is_arith_type Real) true)
    )
)

; Core operators of arithmetic, which are used in mixed Int/Real arithmetic.
; Using integer nil terminators ensures typing is accurate.
(declare-parameterized-const + ((T Type :implicit) (U Type :implicit))
                             (-> T U ($arith_typeunion T U))
                             :right-assoc-nil 0)
(declare-parameterized-const - ((T Type :implicit) (U Type :implicit)) 
                             (-> T U ($arith_typeunion T U)) :left-assoc)
(declare-parameterized-const * ((T Type :implicit) (U Type :implicit)) 
                             (-> T U ($arith_typeunion T U)) :right-assoc-nil 1)
(declare-parameterized-const / ((T Type :implicit) (U Type :implicit))
                             (-> T U ($arith_typeunion T U)) :left-assoc)

(declare-const div (-> Int Int Int) :left-assoc)
(declare-const mod (-> Int Int Int))

; Currently unary negation cannot use overload.
(declare-parameterized-const - ((T Type :implicit))
                     (-> T (eo::requires ($is_arith_type T) true T)))

; Orders
(declare-parameterized-const < ((T Type :implicit) (U Type :implicit))
                             (-> T U
                                (eo::requires ($is_arith_type T) true
                                              (eo::requires ($is_arith_type U) true
                                                            Bool)))
                             :chainable and)

(declare-parameterized-const <= ((T Type :implicit) (U Type :implicit))
                             (-> T U
                                (eo::requires ($is_arith_type T) true
                                              (eo::requires ($is_arith_type U) true
                                                            Bool)))
                             :chainable and)

(declare-parameterized-const > ((T Type :implicit) (U Type :implicit))
                             (-> T U
                                (eo::requires ($is_arith_type T) true
                                              (eo::requires ($is_arith_type U) true
                                                            Bool)))
                             :chainable and)

(declare-parameterized-const >= ((T Type :implicit) (U Type :implicit))
                             (-> T U
                                (eo::requires ($is_arith_type T) true
                                              (eo::requires ($is_arith_type U) true
                                                            Bool)))
                             :chainable and)

; Conversion functions.
(declare-parameterized-const to_real ((T Type :implicit))
                           (-> T (eo::requires ($is_arith_type T) true Real)))

(declare-parameterized-const to_int ((T Type :implicit))
                           (-> T (eo::requires ($is_arith_type T) true Int)))

(declare-parameterized-const is_int ((T Type :implicit))
                           (-> T (eo::requires ($is_arith_type T) true Bool)))

(declare-parameterized-const abs ((T Type :implicit))
                           (-> T (eo::requires ($is_arith_type T) true T)))

; ---------------
;   Quantifiers
; ---------------

(declare-type @VarList ())
(declare-const @varlist.nil @VarList)
(declare-parameterized-const @varlist ((T Type :implicit)) 
                             (-> T @VarList @VarList) :right-assoc-nil @varlist.nil)

(declare-const forall (-> @VarList Bool Bool) :binder @varlist)
(declare-const exists (-> @VarList Bool Bool) :binder @varlist)
(declare-parameterized-const choice ((T Type :implicit))
                             (-> T @VarList T Bool T) :binder @varlist)

; program: get_lambda_type
; args:
; - (list @VarList) : 
; - (B Type) : Return type of the function type.
; return: >
;   The expected function type, with domain in the product type of 
;   and return type B.
(program $get_lambda_type ((x @VarList) (xs @VarList :list) (B Type))
  (@VarList Type) Type
  (
    (
     ($get_lambda_type (@varlist x xs) B) 
     
     (-> (eo::typeof x) ($get_lambda_type xs B))
     )

    (
     ($get_lambda_type @varlist.nil B)

     B
     )
  )
)

(declare-parameterized-const @let ((B Type :implicit) (L @VarList))
                       (-> B ($get_lambda_type L B)) :binder @varlist)

; ------------
;   Contexts
; ------------

(declare-parameterized-const @ctx ((L @VarList))
                        (-> Bool Bool) :binder @varlist)

; constant: @var
; type: (-> (! Type :var B :implicit)
;           (! @VarList :var L)
;           B
;           B)
; note: >
;    Represents an undefined inhabitant of a given type. 
;    Used to represent variables bound by some binder (including @ctx, forall, etc.)
(declare-parameterized-const @var ((B Type :implicit) (L @VarList)) 
                             (-> B B)
                             :binder @varlist)
; ---------------
;   Substitutions
; ---------------

; Since some rules are defined directly in terms of a given substitution.
; Single substitute variable -> value
(declare-type @Substitute ())
(declare-parameterized-const @substitute ((Var Type :implicit) 
                                          (Value Type :implicit))
                             (-> Var Value @Substitute))

(declare-type @Substitution ())

(declare-const @substitution.nil @Substitution)

; TODO: we don't want for the user to employ directly this constructor
; TODO : not sure about declaring @substitution as right_assoc
(declare-const @substitution (-> @Substitute @Substitution @Substitution)
               :right-assoc-nil @substitution.nil)
