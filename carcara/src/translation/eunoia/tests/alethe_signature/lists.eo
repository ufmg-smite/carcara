(include "./theory.eo")

; Library of auxiliary programs, useful to manipulate f-lists (associative 
; operators with nil-terminators) and related structures

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; f-lists
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; define: f_list_index
; args:
; - f (-> A B B): >
;   Right/left assoc. operator used to construct the given f-list
;   (see definition of f-list, for a given operator f, in ethos
;   manual: https://github.com/cvc5/ethos/blob/main/user_manual.md#list-computations)
; - list (B): An f-list: a term of the form (f t1 ... tn)
; - index Int: >
;   An integer, from 0 to the number of parameters - 1 in (f t1 ... tn) 
;   (i.e., "list)
; return: The parameter number "index", from (f t1 ... tn).
(program $f_list_index ((A Type) (B Type) (f (-> A B B)) (hd A) (tail B :list) (index Int))
  ((-> A B B) B Int) A
  (
   (
    ($f_list_index f (f hd tail) 0) 

    hd
    )

   (; { hd is not an f-list }
    ($f_list_index f hd 0) 

    hd
    )

   ;; { index > 0 }
   (($f_list_index f (f hd tail) index)
    ;; TODO: using eo::add
    ($f_list_index f tail (eo::add index -1)))
  )
)

; program: f_list_contains_elem
; args:
; - f (-> A B B): Operator used to build the f-list.
; - elem A: Some element of type A, for which we want to test membership.
; - list B: An f-list.
; return:
; A boolean indicating if "elem" appears in f-list "list".
(program $f_list_contains_elem ((A Type) (B Type) (f (-> A B B))
                               (elem A) (hd A) (tl B :list))
  ((-> A B B) A B) Bool
  (
   (
    ($f_list_contains_elem f elem (f elem tl))

    true
    )

   ; { hd =/= elem}
   (
    ($f_list_contains_elem f elem (f hd tl))

    ($f_list_contains_elem f elem tl)
    )

   ; { elem is not an f-list}
   (
    ($f_list_contains_elem f elem elem)

    true
    )
   
   ; { hd =/= elem}
   (
    ($f_list_contains_elem f elem hd)

    false
    )
  )
)

; program: f_list_contains_elem
; args:
; - f (-> A B B): Operator used to build the f-list.
; - list_1 B: An f-list.
; - list_2 B: An f-list.
; return:
; A boolean indicating if the elements from list_1 also appear in list_2.
(program $f_list_contains_f_list ((A Type) (B Type) (f (-> A B B))
                                 (hd A) (tl B :list)
                                 (f_list_2 B))
  ((-> A B B) B B) Bool
  (
   (
    ($f_list_contains_f_list f (f hd tl) f_list_2)
    ;; TODO: I need some way to build boolean values
    ;; combining other boolean values, but I would like
    ;; to avoid built-in operators.
    (eo::and ($f_list_contains_elem f hd f_list_2)
             ($f_list_contains_f_list f tl f_list_2))
    )

   ;; { f_list_1 is not a term built with f }
   (
    ($f_list_contains_f_list f hd f_list_2)

    ($f_list_contains_elem f hd f_list_2)
    )
  )
)

; program: f_list_equal
; args:
; - f (-> A B B): Operator used to build the f-list.
; - list_1 B: An f-list.
; - list_2 B: An f-list.
; return: >
; A boolean indicating if the operands from list_1 and list_2 are the 
; same, regardless of the order and possible repetitions.
(program $f_list_equal ((A Type) (B Type) (f (-> A B B))
                       (f_list_1 B) (f_list_2 B))
  ((-> A B B) B B) Bool
  (
   (
    ($f_list_equal f f_list_1 f_list_2)

    (eo::and ($f_list_contains_f_list f f_list_1 f_list_2)
             ($f_list_contains_f_list f f_list_2 f_list_1))
    )
  )
)

; program: $f_list_cons
; args:
; - f (-> A B B): Operator used to build the f-list.
; - elem A: An element of type A.
; - flist B: An f-list.
; return: >
;    Returns an f-list, with first operand "elem", followed by operands of flist_2.
(define $f_list_cons ((A Type :implicit) (B Type :implicit) (f (-> A B B)) (elem A)
                     (tail B :list))
    (f elem tail)
)

; program: $f_list_remove_elem
; args:
; - f (-> A B B): Operator used to build the f-list.
; - list B: An f-list, where f is a variadic operator with some "nil" element.
; - f_nil B: The "nil" element of variadic operator f.
; - elem A: An element from "list" that we want to remove.
; return: >
;   Removes the first occurrence of "elem" in the given f-list. Returns
;   the obtained f-list.
(program $f_list_remove_elem ((A Type) (B Type)
                             (f (-> A B B)) (f_nil B) (hd A) (tl B :list)
                             (elem A))
  ((-> A B B) B A B) B

  (
   (
    ($f_list_remove_elem f (f elem tl) elem f_nil)
    
    tl
    )

   (; { hd =/= elem }
    ($f_list_remove_elem f (f hd tl) elem f_nil)
    
    ($f_list_cons f hd ($f_list_remove_elem f tl elem f_nil))
    )

   (
    ($f_list_remove_elem f elem elem f_nil)
    
    f_nil
    )
   
   ; TODO: this should be an error
   (; { hd =/= elem }
    ($f_list_remove_elem f hd elem f_nil)
    
    hd
    )
   )
  )

; program: $f_list_remove_every_elem
; args:
; - f (-> A B B): Operator used to build the f-list.
; - list B: An f-list, where f is a variadic operator with some "nil" element.
; - f_nil B: The "nil" element of variadic operator f.
; - elem A: An element from "list" that we want to remove.
; return: >
;   Removes the every occurrence of "elem" in the given f-list. Returns
;   the obtained f-list.
(program $f_list_remove_every_elem ((A Type) (B Type)
                             (f (-> A B B)) (f_nil B) (hd A) (tl B :list)
                             (elem A))
  ((-> A B B) B A B) B

  (
   (
    ($f_list_remove_every_elem f (f elem tl) elem f_nil)
    
    ($f_list_remove_every_elem f tl elem f_nil)
    )

   (; { hd =/= elem }
    ($f_list_remove_every_elem f (f hd tl) elem f_nil)
    
    ($f_list_cons f hd ($f_list_remove_every_elem f tl elem f_nil))
    )

   (
    ($f_list_remove_every_elem f elem elem f_nil)
    
    f_nil
    )
   
   ; TODO: this should be an error
   (; { hd =/= elem }
    ($f_list_remove_every_elem f hd elem f_nil)
    
    hd
    )
   )
  )

; TODO: implement this as a higher-order program, once it becomes feasible
; program: f_list_filter
; args:
; - f (-> A B B): Operator used to build the f-list.
; - f_nil B: The "nil" element of variadic operator f.
; - list B: An f-list, where f is a variadic operator with some "nil" element.
; - flags @VarList: List of flags indicating which element must be removed.
; return: >
;   Removes element in index i from "list", if the flag in position i from 
;   "flags" is true.
(program $f_list_filter ((A Type) (B Type) (f (-> A B B)) (nil_elem B)
                         (hd A) (f_tl B :list) (varlist_tl @VarList :list))
         ((-> A B B) B B @VarList) B
         (
          (
           ($f_list_filter f nil_elem (f hd f_tl) (@varlist true varlist_tl))

           ($f_list_filter f nil_elem f_tl varlist_tl)
           )

          (
           ($f_list_filter f nil_elem (f hd f_tl) (@varlist false varlist_tl))
           ($f_list_cons f
                         hd
                         ($f_list_filter f nil_elem f_tl varlist_tl))
           )

          (
           ($f_list_filter f nil_elem hd (@varlist false @varlist.nil))
           (f hd nil_elem)
           )

          (
           ($f_list_filter f nil_elem hd (@varlist true @varlist.nil))
           nil_elem 
           )

          (
           ($f_list_filter f nil_elem nil_elem @varlist.nil)
           nil_elem
           )
          )
         )

; program: $f_list_remove_duplicates
; args:
; - f (-> A B B): An Eunoia's "variadic" function.
; - f_nil B: Nil element of "f".
; - f_list B: An f-list from which we want to remove repeated elements.
; return: >
;   A f-list obtained from removing repeated elements from "f_list".
;   Removes the first repeated occurrence of an element, traversing 
;   "f_list" from left to right.
(program $f_list_remove_duplicates ((A Type) (B Type) (f (-> A B B)) (hd A) 
                                    (f_nil B) (tl B :list))
:signature ((-> A B B) B B) B
(
 (
  ($f_list_remove_duplicates f f_nil (f hd tl))
  
  ($f_list_cons f hd 
                ($f_list_remove_every_elem f  ($f_list_remove_duplicates f f_nil tl)
                                           hd f_nil))
  )

 (; { hd <> f some_element tail }
  ($f_list_remove_duplicates f f_nil hd)
  
  hd
  )
 )
)

; program: $f_list_last_element
; args:
; - f (-> A B B): Operator used to build the f-list.
; - nil B: Nil element of operator f.
; - f-list B: A non-empty f-list.
; precondition: f-list is not empty.
; return: Last element of f-list.
(program $f_list_last_element ((A Type) (B Type) (f (-> A B B))
                               (hd A) (nil_elem A) (f_tl A :list))
         ((-> A B B) B B) A
         (
          (
           ($f_list_last_element f nil_elem (f hd nil_elem))

           hd
           )

          (
           ($f_list_last_element f nil_elem (f hd f_tl))

           ($f_list_last_element f nil_elem f_tl)
           )
          )
         )

;-------------
; Reflection
;-------------

; program: $f_list_operator_is_right_assoc
; args:
; - f (-> A A B): Operator upon which we want to reflect.
; return: A boolean indicating if the operator is declared as right assoc.
(program $f_list_operator_is_right_assoc ((A Type) (B Type) (f (-> A B B)))
         :signature ((-> A B B)) Bool
         (
          (
           ($f_list_operator_is_right_assoc @cl)

           true
           )

          (
           ($f_list_operator_is_right_assoc or)

           true
           )

          (
           ($f_list_operator_is_right_assoc and)

           true
           )

          (
           ($f_list_operator_is_right_assoc +)

           true
           )

          (
           ($f_list_operator_is_right_assoc *)

           true
           )

          (
           ($f_list_operator_is_right_assoc @varlist)
           true
           )

          (; TODO : not sure about declaring @substitution as right_assoc
           ($f_list_operator_is_right_assoc @substitution)
           true
           )

          (
           ($f_list_operator_is_right_assoc f)

           false
           )
          )
         )

; program: $is_theory_f_list
; args:
; - f (-> T U): A function constant.
; return: >
;    A boolean indicating if the given parameter is a list operator or not, depending
;    on whether the applied operator is actually defined in our theory, as
;    left/right assoc-nil. In any other case, it returns false.
(program $is_theory_f_list ((U Type) (T Type) (f (-> T U)))
         :signature ((-> T U)) Bool
         (
          (
           ($is_theory_f_list @cl)

           true
           )

          (
           ($is_theory_f_list or)

           true
           )

          (
           ($is_theory_f_list and)

           true
           )

          (
           ($is_theory_f_list +)

           true
           )

          (
           ($is_theory_f_list *)

           true
           )

          (
           ($is_theory_f_list @varlist)

           true
           )

          (
           ($is_theory_f_list @substitution)

           true
           )

          (
           ($is_theory_f_list f)

           false
           )
          )
         )

