(include "./theory.eo")

; Library of auxiliary programs, useful to manipulate many different
; Eunoia constructions.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; f-lists computations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; define: f_list_index
; args:
; - f (-> A A A): >
;   Right/left assoc. operator used to construct the given f-list
;   (see definition of f-list, for a given operator f, in ethos
;   manual: https://github.com/cvc5/ethos/blob/main/user_manual.md#list-computations)
; - list (A): An f-list: a term of the form (f t1 ... tn)
; - index Int: >
;   An integer, from 0 to the number of parameters - 1 in (f t1 ... tn) 
;   (i.e., "list)
; return: The parameter number "index", from (f t1 ... tn) (i.e., "list")
(program $f_list_index ((A Type) (f (-> A A A)) (hd A) (tail A :list) (index Int))
  ((-> A A A) A Int) A
  (
   (($f_list_index f (f hd tail) 0) hd)

   ;; { index > 0 }
   (($f_list_index f (f hd tail) index)
    ;; TODO: using eo::add
    ($f_list_index f tail (eo::add index -1)))
  )
)

; program: f_list_contains_elem
; args:
; - f (-> A A A): Operator used to build the f-list.
; - elem A: Some element of type A, for which we want to test membership.
; - list A: An f-list.
; return:
; A boolean indicating if "elem" appears in f-list "list".
(program $f_list_contains_elem ((A Type) (f (-> A A A))
                               (elem A) (hd A) (tl A :list))
  ((-> A A A) A A) Bool
  (
   (($f_list_contains_elem f elem (f elem tl))

    true)

   ; { hd =/= elem}
   (($f_list_contains_elem f elem (f hd tl))

    ($f_list_contains_elem f elem tl))

   ; { elem is not an f-list}
   (($f_list_contains_elem f elem elem)

    true)
   
   ; { hd =/= elem}
   (($f_list_contains_elem f elem hd)

    false)
  )
)

; program: f_list_contains_elem
; args:
; - f (-> A A A): Operator used to build the f-list.
; - list_1 A: An f-list.
; - list_2 A: An f-list.
; return:
; A boolean indicating if the elements from list_1 also appear in list_2.
(program $f_list_contains_f_list ((A Type) (f (-> A A A))
                                 (hd A) (tl A :list)
                                 (f_list_2 A))
  ((-> A A A) A A) Bool
  (
   (($f_list_contains_f_list f (f hd tl) f_list_2)
    ;; TODO: I need some way to build boolean values
    ;; combining other boolean values, but I would like
    ;; to avoid built-in operators.
    (eo::and ($f_list_contains_elem f hd f_list_2)
             ($f_list_contains_f_list f tl f_list_2)))

 
   ;; { f_list_1 is not a term built with f }
   (($f_list_contains_f_list f hd f_list_2)
    ($f_list_contains_elem f hd f_list_2))
  )
)

; program: f_list_equal
; args:
; - f (-> A A A): Operator used to build the f-list.
; - list_1 A: An f-list.
; - list_2 A: An f-list.
; return: >
; A boolean indicating if the operands from list_1 and list_2 are the 
; same, regardless of the order and possible repetitions.
(program $f_list_equal ((A Type) (f (-> A A A))
                       (f_list_1 A) (f_list_2 A))
  ((-> A A A) A A) Bool
  (
   (($f_list_equal f f_list_1 f_list_2)
    (eo::and ($f_list_contains_f_list f f_list_1 f_list_2)
             ($f_list_contains_f_list f f_list_2 f_list_1)))
  )
)

; program: f_list_concat
; args:
; - f (-> A A A): Operator used to build the f-list.
; - elem A: An element of type A.
; - flist A: An f-list.
; return: >
; Returns an f-list, with first operand "elem", followed by operands of flist_2.
(define $f_list_cons ((A Type :implicit) (f (-> A A A)) (elem A)
                     (tail A :list))
    (f elem tail)
)

; program: f_list_remove_elem
; args:
; - list B: An f-list, where f is a variadic operator with some "nil" element.
; - f_nil A: The "nil" element of variadic operator f.
; - elem A: An element from "list" that we want to remove.
; return: >
;   Removes the first occurrence of "elem" in the given f-list. Returns
;   the obtained f-list.
(program $f_list_remove_elem ((A Type) (B Type)
                             (f (-> A A B)) (f_nil A) (hd A) (tl A :list)
                             (elem A))
  (B A A) B

  (
   (
    ($f_list_remove_elem (f elem tl) elem f_nil)
    
    tl
    )

   (; { hd =/= elem }
    ($f_list_remove_elem (f hd tl) elem f_nil)
    
    (f hd ($f_list_remove_elem tl elem f_nil))
    )

   (
    ($f_list_remove_elem elem elem f_nil)
    
    f_nil
    )

   ; TODO: this should be, somehow, an error
   (; { hd =/= elem }
    ($f_list_remove_elem hd elem f_nil)
    
    hd
    )
   )
  )

; TODO: implement this as a higher-order program, once it becomes feasible
; program: $f_list_filter
; args:
; - hd Bool:
; - cl_tl Bool:
; - varlist_tl @VarList:
; return:
(program $f_list_filter ((A Type) (f (-> A A A)) (nil_elem A)
                         (hd A) (f_tl A :list) (varlist_tl @VarList :list))
         ((-> A A A) A A @VarList) A
         (
          (
           ($f_list_filter f nil_elem (f hd f_tl) (@varlist true varlist_tl))
           ($f_list_filter f nil_elem f_tl varlist_tl)
           )

          (
           ($f_list_filter f nil_elem (f hd f_tl) (@varlist false varlist_tl))
           ($f_list_cons f
                         hd
                         ($f_list_filter f nil_elem f_tl varlist_tl))
           )

          (
           ($f_list_filter f nil_elem hd (@varlist false @varlist.nil))
           (f hd nil_elem)
           )

          (
           ($f_list_filter f nil_elem hd (@varlist true @varlist.nil))
           nil_elem 
           )

          (
           ($f_list_filter f nil_elem nil_elem @varlist.nil)
           nil_elem
           )
          )
         )

;;;;;;;;;;;;
;; @VarList
;;;;;;;;;;;;

; TODO: this should be implemented using f-list functions
; program: varlist_concat
; args:
; - varlist_concat nil:
; return:
(program $varlist_concat ((A Type) (hd A) (tl @VarList :list)
                         (varlist_2 @VarList))
  (@VarList @VarList) @VarList

  (
   (
    ($varlist_concat (@varlist hd tl) varlist_2)
    
    ($f_list_cons @varlist 
                 hd
                 ($varlist_concat tl varlist_2))
    )

   (
    ($varlist_concat @varlist.nil varlist_2)
    
    varlist_2
    )
   )
)

; program: varlist_reverse
; args:
; - A Type:
; - hd A:
; - tl @VarList:
; return:
(program $varlist_reverse ((A Type) (hd A) (tl @VarList :list))
  (@VarList) @VarList
  (
   (
    ($varlist_reverse (@varlist hd tl))

    ($varlist_concat ($varlist_reverse tl) 
                    ($f_list_cons @varlist hd @varlist.nil))
    )
   (
    ($varlist_reverse @varlist.nil)

    @varlist.nil
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Clauses
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; program: from_cl
; args:
; - T Bool: A proposition.
; return: >
;   For a unit clause, built with @cl, removes the top @cl if 
;   any, returning the only disjunct. Otherwise, returns T.
(program $from_cl ((T Bool))
    (Bool) Bool
    (
        (($from_cl (@cl T)) T)
        (($from_cl T) T)
    )
)

; program: to_cl
; args:
; - T Bool: A proposition.
; return: >
;   Embeds T within a unit clause built with @cl, only
;   if T is not a unit clause built with @cl itself. 
(program $to_cl ((T Bool))
    (Bool) Bool
    (
        (($to_cl (@cl T)) (@cl T))
        (($to_cl T) (@cl T))
    )
)

; TODO: is it ok?
; program: prop_syntax_eq
; args:
; - phi_1 Bool: A proposition.
; - phi_2 Bool: A proposition.
; return: A boolean indicating if phi_1 and phi_2 are syntactically equal.
(program $prop_syntax_eq ((phi Bool))
  (Bool Bool) Bool
  (
   (($prop_syntax_eq phi phi) true)

   (($prop_syntax_eq _ _) false)
   )
)

; program: cl_equal
; args:
; - cl_1 Bool: A clause, built with @cl.
; - cl_2 Bool: A clause, built with @cl.
; return: >
;   A boolean indicating if cl_1 and cl_2 are equal modulo permutations.
(program $cl_equal ((cl_1 Bool) (cl_2 Bool))
  (Bool Bool) Bool
  (
   (($cl_equal cl_1 cl_2)
    ($f_list_equal @cl cl_1 cl_2))
  )
)

; program: convert_or_to_cl
; args:
; - or_clause Bool : >
;   Clause to convert, built with the "or" operator.
; - accum Bool : Partial result accumulator
; return: >
;   A clause equivalent to "or_clause", built exclusively with @cl.
(program $convert_or_to_cl ((or_clause Bool) (disjunct_1 Bool) (disjunct_2 Bool :list))
  (Bool) Bool
  ((($convert_or_to_cl (or disjunct_1 disjunct_2))
    ($f_list_cons @cl disjunct_1 ($convert_or_to_cl disjunct_2)))
   ; { disjunct_1 is not built with "or" }
   (($convert_or_to_cl disjunct_1)
    disjunct_1))
)

; program: transform_not_and
; args:
; - ls Bool: A conjunction of terms.
; return: >
;   Applies De Morgan's law over the conjuncts of "ls", returning a new clause
;   built with @cl.
(program $de_morgan_not_and ((l Bool) (ls Bool))
  (Bool) Bool
  (
   (($de_morgan_not_and (and l ls))
    (@cl (not l) ($from_cl ($de_morgan_not_and ls)))
    )

   (($de_morgan_not_and l) (@cl (not l)))
  )
)


; TODO: implement this as a higher-order program, once it becomes feasible
; program: $flag_duplicates
; args:
; - hd Bool:
; - tl Bool:
; return:
(program $flag_duplicates ((A Type) (B Type)
                           (f (-> A A B))
                           (nil_elem A)
                           (hd A) (tl A :list))
         ((-> A A B) A A) @VarList

         (
          (
           ($flag_duplicates f nil_elem (f hd tl))

           ($varlist_concat
            ($f_list_cons @varlist 
                          ($f_list_contains_elem f hd tl)
                          @varlist.nil)
            ($flag_duplicates f nil_elem tl))
           )

          (
           ($flag_duplicates f nil_elem nil_elem)

           @varlist.nil
           )

          ; { hd <> nil_elem }
          (
           ($flag_duplicates f nil_elem hd)

           ($f_list_cons @varlist 
                         false
                         @varlist.nil)
           )
          )
)

; program: cl_remove_duplicates
; args:
; - clause Bool: A clause from which we want to delete duplicates.
; return: A clause that contains every element from "clause", without duplicates.
(program $cl_remove_duplicates ((clause Bool))
         (Bool) Bool
         (
          (
           ($cl_remove_duplicates clause)

           ($f_list_filter @cl false clause 
                           ($flag_duplicates @cl false clause))
           )
          )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; implication
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; program: rewrite_implication
; args:
; - implication Bool: >
;   An implication over which we want to apply simplifying rewrites.
; return:
;   A proposition that is equivalent to "implication", but that is
;   not built with =>.
(program $rewrite_implication ((phi_1 Bool) (phi_2 Bool))
         (Bool) Bool
         (; We apply semantics preserving rewrites.
          (($rewrite_implication (=> (not phi_1) (not phi_2)))
          
          ($rewrite_implication (=> phi_2 phi_1)))

          
          (($rewrite_implication (=> false phi_1))
          
          true)

          (($rewrite_implication (=> phi_1 true))
          
          true)

          (($rewrite_implication (=> true phi_1))
          
          phi_1)

          (($rewrite_implication (=> phi_1 false))
          
          (not phi_1))

          (($rewrite_implication (=> phi_1 phi_1))
          
          true)

          (($rewrite_implication (=> (not phi_1) phi_1))
          
          phi_1)

          (($rewrite_implication (=> (not phi_1) (not phi_1)))
          
          (not phi_1))
          )
)

; program: rewrite_equivalence
; args:
; - equivalence Bool: >
;   An equivalence over which we want to apply simplifying rewrites.
; return:
;   A proposition that is equivalent to "equivalence", but that is
;   not built with =.
(program $rewrite_equivalence ((phi_1 Bool) (phi_2 Bool))
         (Bool) Bool
         (; We apply semantics preserving rewrites.
          (($rewrite_equivalence (= (not phi_1) (not phi_2)))
          
          ($rewrite_equivalence (= phi_2 phi_1)))

          
          (($rewrite_equivalence (= phi_1 phi_1))
          
          true)

          (($rewrite_equivalence (= phi_1 (not phi_1)))
          
          false)

          (($rewrite_equivalence (= (not phi_1) phi_1))
          
          false)

          (($rewrite_equivalence (= true phi_1))
          
          phi_1)

          (($rewrite_equivalence (= phi_1 true))
          
          phi_1)

          (($rewrite_equivalence (= phi_1 false))
          
          (not phi_1))

          (($rewrite_equivalence (= false phi_1))
          
          (not phi_1))

          )
)


;;;;;;;;;;;;;
;; contexts
;;;;;;;;;;;;;

; TODO: implement a generalization of this
; program: get_value
; args:
; - get_value nil:
; return:
(program $get_value ((A Type) (id A) (B Type)
                    (value B) (hd Bool) (tl Bool :list))
         (Bool A) B
         (
          (($get_value (and (= id value) tl) id)
           
           value)

          ; { hd =/= (= id value), for some value "value"} 
          (($get_value (and hd tl) id)
           
           ($get_value tl id))

          (($get_value (= id value) id)
           
           value)
          )
)

; program: context_get_substitute
; args:
; - context_get_substitute nil:
; return:
(program $context_get_substitute ((A Type) (id A) (B Type)
                                 (value B) (varlist @VarList) 
                                 (ctx Bool) (and_list Bool))
         (Bool A) B
         (
          (($context_get_substitute (@ctx varlist and_list) id)
           
           ($get_value and_list id))
          )
)

; program: context_get_var_subst_pairs
; args:
; - context_get_var_subst_pairs nil:
; return:
(program $context_get_var_subst_pairs ((A Type) (id A) (B Type)
                                      (value B) (varlist @VarList) 
                                      (context Bool) (and_list Bool)
                                      (ids @VarList :list))
         (Bool @VarList) @VarList
         (
          (
           ($context_get_var_subst_pairs context (@varlist id ids))
           
           ($f_list_cons @varlist 
                        ($f_list_cons @varlist id ($context_get_substitute context id))
                        ($context_get_var_subst_pairs context ids))
           )
          (
           ($context_get_var_subst_pairs context @varlist.nil)
           
           @varlist.nil
           )
          )
)


;;;;;;;;;;;;;
;; let
;;;;;;;;;;;;;

; TODO: once programs can be passed and used, abstract the logic of these
;       functions into a single program
; program: let_get_vars
; args:
; - let_get_vars nil:
; return:
(program $let_get_vars ((let_type Type) (var_defs @VarList)
                       (body_type Type) (body body_type)
                       (A Type) (var_values A)
                       (B Type) (nested_func_app B))

         (let_type) @VarList
         (
          (
           ($let_get_vars (_ (@let var_defs body) var_values))

           var_defs
           )

          (; { nested_func_app =/= (@let ...) }
           ($let_get_vars (_ nested_func_app var_values))

           ($let_get_vars nested_func_app)
           )
          )
         )

; program: let_get_values
; args:
; - let_get_vars nil:
; return:
(program $let_get_values ((let_type Type) (varlist @VarList)
                         (body_type Type) (body body_type)
                         (B Type) (nested_func_app B)
                         (A Type) (value A))

         (let_type) @VarList
         (
          (
           ($let_get_values (_ (@let varlist body) value))

           ($f_list_cons @varlist value @varlist.nil)
           )

          (
           ; { nested_func_app =/= (@let ...) }
           ($let_get_values (_ nested_func_app value))

           ($varlist_reverse ($f_list_cons @varlist 
                                         value 
                                         ($let_get_values nested_func_app)))
           )
          
          )
         )

; program: let_get_body
; args:
; - let_get_body nil:
; return:
(program $let_get_body ((let_type Type) (varlist @VarList)
                         (body_type Type) (body body_type)
                         (B Type) (nested_func_app B)
                         (A Type) (value A))

         (let_type) body_type
         (
          (
           ($let_get_body (_ (@let varlist body) value))

           body
           )

          (
           ; { nested_func_app =/= (@let ...) }
           ($let_get_body (_ nested_func_app value))

           ($let_get_body nested_func_app)
           )
          
          )
         )

; program: let_get_vars_substitutes
; args:
; - let_get_vars_substitutes nil:
; return:
(program $let_get_vars_substitutes ((B Type) (x B)
                                   (vardefs @VarList :list)
                                   (U Type) (value_x U) 
                                   (parameters @VarList :list))

         (@VarList @VarList) @VarList
         (
          (
           ($let_get_vars_substitutes (@varlist x vardefs)
                                     (@varlist value_x parameters))

           ($f_list_cons @varlist 
                        ($f_list_cons @varlist x value_x)
                        ($let_get_vars_substitutes vardefs parameters))
           )

          (
           ($let_get_vars_substitutes @varlist.nil @varlist.nil)

           @varlist.nil
           )
          )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Bounded occurrences of variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; TODO: implement this as a higher-order program, once it becomes feasible
; program: $flag_members
; args:
; - varlist_1 @VarList: >
;   A list for whose elements we want to determine membership with respect to
;   varlist_2.
; - varlist_2 @VarList: >
;   A list against which determine membership of each element from varlist_1.
; return:
;   A @VarList of booleans such that its i-th element indicates if the 
;   i-th element from varlist_1 also occurs in varlist_2.
(program $flag_members ((A Type) 
                        (hd_1 A) (tl_1 A :list)
                        (varlist_2 @VarList))

         (@VarList @VarList) @VarList

         (
          (
           ($flag_members (@varlist hd_1 tl_1) varlist_2)
           
           ($f_list_cons @varlist 
                         ($f_list_contains_elem @varlist hd_1 varlist_2)
                         ($flag_members tl_1 varlist_2))
           )

          (
           ($flag_members @varlist.nil varlist_2)

           @varlist.nil
           )
          )
         )

; program: $get_free_variables
; args:
; - $get_free_variables nil:
; return:
(program $get_free_variables ((A Type)
                              (vars @VarList)
                              (bool_body Bool)
                              (hd Bool) (tl Bool :list)
                              (prop Bool) (left_prop Bool)
                              (right_prop Bool :list)
                              (B Type) (lhs B) (rhs B)
                              (C Type) (hd_distinct C) (tl_distinct C :list)
                              (D Type) (left_elem D) (right_elem D)
                              (E Type) (x E)
                              (F Type) (G Type) (function (-> F G)) (actual_argument F)
                              (H Type) (vars_body H))
         (A) @VarList

         (
          (
           ($get_free_variables (forall vars bool_body))

           ; TODO: repeating stuff...
           ($f_list_filter @varlist @varlist.nil
                           ($get_free_variables bool_body)
                           ($flag_members ($get_free_variables bool_body) 
                                          vars)
                           )
           )

          (
           ($get_free_variables (exists vars bool_body))

           ; TODO: repeating stuff...
           ($f_list_filter @varlist @varlist.nil
                           ($get_free_variables bool_body)
                           ($flag_members ($get_free_variables bool_body) 
                                          vars))
           )

          ; @cl
          (
           ($get_free_variables (@cl hd tl))
           
           ; TODO: repeating stuff...
           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables hd)
                                            ($get_free_variables tl))
                           ($flag_duplicates @varlist @varlist.nil
                            ($varlist_concat ($get_free_variables hd)
                                             ($get_free_variables tl))))
           )

          (
           ($get_free_variables @empty_cl)

           @varlist.nil
           )

          ; propositional logic
          (
           ($get_free_variables true)

           @varlist.nil
           )

          (
           ($get_free_variables false)

           @varlist.nil
           )

          (
           ($get_free_variables (not prop))

           ($get_free_variables prop)
           )

          (
           ($get_free_variables (or left_prop right_prop))

           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables left_prop)
                                            ($get_free_variables right_prop)) 
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables left_prop)
                                                              ($get_free_variables right_prop))))
           
           )
          
          (
           ($get_free_variables (and left_prop right_prop))
           
           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables left_prop)
                                            ($get_free_variables right_prop)) 
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables left_prop)
                                                              ($get_free_variables right_prop))))
           )

          (
           ($get_free_variables (=> left_prop right_prop))

           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables left_prop)
                                            ($get_free_variables right_prop)) 
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables left_prop)
                                                              ($get_free_variables right_prop))))
           )

          (
           ($get_free_variables (xor left_prop right_prop))

           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables left_prop)
                                            ($get_free_variables right_prop)) 
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables left_prop)
                                                              ($get_free_variables right_prop))))
           )

          (
           ($get_free_variables (= lhs rhs))

           ($f_list_filter @varlist @varlist.nil
                           ($varlist_concat ($get_free_variables lhs)
                                            ($get_free_variables rhs))
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables lhs)
                                                              ($get_free_variables rhs))))
           )
          
          (; TODO
           ($get_free_variables (distinct hd_distinct tl_distinct))

           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables hd_distinct)
                                            ($get_free_variables tl_distinct)) 
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables hd_distinct)
                                                              ($get_free_variables tl_distinct))))
           )
          
          ; Ordered relations
          (
           ($get_free_variables (< left_elem right_elem))

           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables left_elem)
                                            ($get_free_variables right_elem)) 
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables left_elem)
                                                              ($get_free_variables right_elem))))
           )

          (
           ($get_free_variables (<= left_elem right_elem))

           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables left_elem)
                                            ($get_free_variables right_elem)) 
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables left_elem)
                                                              ($get_free_variables right_elem))))
           )

          (
           ($get_free_variables (> left_elem right_elem))

           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables left_elem)
                                            ($get_free_variables right_elem)) 
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables left_elem)
                                                              ($get_free_variables right_elem))))
           )

          (
           ($get_free_variables (>= left_elem right_elem))

           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables left_elem)
                                            ($get_free_variables right_elem)) 
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables left_elem)
                                                              ($get_free_variables right_elem))))
           )

          (
           ($get_free_variables (@var vars vars_body))

           ($f_list_filter @varlist @varlist.nil
                           ($get_free_variables vars_body)
                           ($flag_members ($get_free_variables vars_body) 
                                          vars)
                           )
           )

          (
           ($get_free_variables (_ function actual_argument))

           ($f_list_filter @varlist @varlist.nil 
                           ($varlist_concat ($get_free_variables function)
                                            ($get_free_variables actual_argument)) 
                           ($flag_duplicates @varlist @varlist.nil
                                             ($varlist_concat ($get_free_variables function)
                                                              ($get_free_variables actual_argument))))
           )

          ; { x is a var }
          (
           ($get_free_variables x)

           ($f_list_cons @varlist x @varlist.nil)
           )
          )
)
