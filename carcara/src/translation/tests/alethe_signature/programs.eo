(include "./theory.eo")

;; Library of auxiliary programs, useful to manipulate propositions.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; f-lists computations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; define: f_list_index
; args:
; - f (-> A A A): >
;   Right/left assoc. operator used to construct the given f-list
;   (see definition of f-list, for a given operator f, in ethos
;   manual: https://github.com/cvc5/ethos/blob/main/user_manual.md#list-computations)
; - list (A): An f-list: a term of the form (f t1 ... tn)
; - index Int: >
;   An integer, from 0 to the number of parameters - 1 in (f t1 ... tn) 
;   (i.e., "list)
; return: The parameter number "index" - 1, from (f t1 ... tn) (i.e., "list")
(program f_list_index ((A Type) (f (-> A A A)) (hd A) (tail A :list) (index Int))
  ((-> A A A) A Int) A
  (
   ((f_list_index f (f hd tail) 0) hd)

   ;; { index > 0 }
   ((f_list_index f (f hd tail) index)
    ;; TODO: using eo::add
    (f_list_index f tail (eo::add index -1)))
  )
)

(program f_list_contains_elem ((A Type) (f (-> A A A)) (elem A) 
                               (hd A) (tl A :list))
  ((-> A A A) A A) Bool
  (
   ((f_list_contains_elem f elem (f elem tl)) true)

   ;; { head of list is not phi}
   ((f_list_contains_elem f elem (f hd tl)) (f_list_contains_elem f elem tl))

   ((f_list_contains_elem f elem elem) true)

   ;; { hd != elem}
   ((f_list_contains_elem f elem hd) false)
  )
)

(program f_list_contains_f_list ((A Type) (f (-> A A A)) (elem A) 
                                 (hd A) (tl A :list)
                                 (f_list_2 A))
  ((-> A A A) A A) Bool
  (
   ((f_list_contains_f_list f (@cl hd tl) f_list_2)
    ;; TODO: I need some way to build boolean values
    ;; combining other boolean values, but I would like
    ;; to avoid built-in operators.
    (eo::and (f_list_contains_elem f hd f_list_2)
             (f_list_contains_f_list f tl f_list_2)))

 
   ;; { f_list_1 is not a term built with f }
   ((f_list_contains_f_list f hd f_list_2)
    (f_list_contains_elem f hd f_list_2))
  )
)

(program f_list_equal ((A Type) (f (-> A A A)) (f_list_1 A) (f_list_2 A))
  ((-> A A A) A A) Bool
  (
   ((f_list_equal f f_list_1 f_list_2)
    (eo::and (f_list_contains_f_list f f_list_1 f_list_2)
             (f_list_contains_f_list f f_list_2 f_list_1)))
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CLAUSES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; program: from_cl
; args:
; - T Bool: A proposition.
; return: >
;   For a unit clause, built with @cl, removes the top @cl if 
;   any, returning the only disjunct. Otherwise, returns T.
(program from_cl ((T Bool))
    (Bool) Bool
    (
        ((from_cl (@cl T)) T)
        ((from_cl T) T)
    )
)

; program: to_cl
; args:
; - T Bool: A proposition.
; return: >
;   Embeds T within a unit clause built with @cl, only
;   if T is not a unit clause built with @cl itself. 
(program to_cl ((T Bool))
    (Bool) Bool
    (
        ((to_cl (@cl T)) (@cl T))
        ((to_cl T) (@cl T))
    )
)

; TODO: is it ok?
; program: prop_syntax_eq
; args:
; - phi_1 Bool: A proposition.
; - phi_2 Bool: A proposition.
; return: A boolean indicating if phi_1 and phi_2 are syntactically equal.
(program prop_syntax_eq ((phi Bool))
  (Bool Bool) Bool
  (
   ((prop_syntax_eq phi phi) true)

   ((prop_syntax_eq _ _) false)
   )
)

;; ; program: cl_contains_prop
;; ; args:
;; ; - phi Bool: A proposition.
;; ; - clause Bool: A clause, built with @cl.
;; ; return: A boolean indicating if "phi" is a disjunct from "clause".
;; (program cl_contains_prop ((phi Bool) (hd Bool) (tl Bool :list))
;;   (Bool Bool) Bool
;;   (
;;    ((cl_contains_prop phi (@cl phi tl)) true)

;;    ;; { head of list is not phi}
;;    ((cl_contains_prop phi (@cl hd tl)) (cl_contains_prop phi tl))

;;    ((cl_contains_prop phi phi) true)

;;    ;; { hd != phi}
;;    ((cl_contains_prop phi hd) false)
;;   )
;; )

;; ; program: cl_contains_cl
;; ; args:
;; ; - cl_1 Bool: A clause, built with @cl.
;; ; - cl_2 Bool: A clause, built with @cl.
;; ; return: >
;; ;   A boolean indicating if cl_1's disjuncts are also present
;; ;   in cl_2
;; (program cl_contains_cl ((hd Bool) (tl Bool :list) (cl_2 Bool))
;;   (Bool Bool) Bool
;;   (
;;    ((cl_contains_cl (@cl hd tl) cl_2)
;;     ;; TODO: I need some way to build boolean values
;;     ;; combining other boolean values, but I would like
;;     ;; to avoid built-in operators.
;;     (eo::and (cl_contains_prop hd cl_2)
;;              (cl_contains_cl tl cl_2)))

 
;;    ;; { cl_1 is not a clause built with @cl }
;;    ((cl_contains_cl hd cl_2)
;;     (cl_contains_prop hd cl_2))
;;   )
;; )

; program: cl_equal
; args:
; - cl_1 Bool: A clause, built with @cl.
; - cl_2 Bool: A clause, built with @cl.
; return: >
;   A boolean indicating if cl_1 and cl_2 are equal modulo permutations.
(program cl_equal ((cl_1 Bool) (cl_2 Bool))
  (Bool Bool) Bool
  (
   ((cl_equal cl_1 cl_2)
    (f_list_equal @cl cl_1 cl_2))
    ;; (eo::and (cl_contains_cl cl_1 cl_2)
    ;;          (cl_contains_cl cl_2 cl_1)))
  )
)

; program: convert_or_to_cl
; args:
; - or_clause Bool : >
;   Clause to convert, built with the "or" operator.
; - accum Bool : Partial result accumulator
; return: >
;   A clause equivalent to "or_clause", built exclusively with @cl.
(program convert_or_to_cl ((or_clause Bool) (disjunct_1 Bool) (disjunct_2 Bool))
  (Bool) Bool
  (((convert_or_to_cl (or disjunct_1 disjunct_2))
    (@cl disjunct_1 (from_cl (convert_or_to_cl disjunct_2))))

   ; { disjunct_1 is not built with "or" }
   ((convert_or_to_cl disjunct_1)
    (@cl disjunct_1))
   )
)

; program: transform_not_and
; args:
; - ls Bool: A conjunction of terms.
; return: >
;   Applies De Morgan's law over the conjuncts of "ls", returning a new clause
;   built with @cl.
(program de_morgan_not_and ((l Bool) (ls Bool))
  (Bool) Bool
  (
   ((de_morgan_not_and (and l ls))
    (@cl (not l) (from_cl (de_morgan_not_and ls)))
    )

   ((de_morgan_not_and l) (@cl (not l)))
  )
)
