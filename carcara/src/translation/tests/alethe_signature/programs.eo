(include "./theory.eo")

;; Library of auxiliary programs, useful to manipulate propositions.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CLAUSES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; program: from_cl
; args:
; - T Bool: A proposition.
; return: >
;   For a unit clause, built with @cl, removes the top @cl if 
;   any, returning the only disjunct. Otherwise, returns T.
(program from_cl ((T Bool))
    (Bool) Bool
    (
        ((from_cl (@cl T)) T)
        ((from_cl T) T)
    )
)

; program: to_cl
; args:
; - T Bool: A proposition.
; return: >
;   Embeds T within a unit clause built with @cl, only
;   if T is not a unit clause built with @cl itself. 
(program to_cl ((T Bool))
    (Bool) Bool
    (
        ((to_cl (@cl T)) (@cl T))
        ((to_cl T) (@cl T))
    )
)

; program: cl_contains_prop
; args:
; - phi Bool: A proposition.
; - clause Bool: A clause, built with @cl.
; return: A boolean indicating if "phi" is a disjunct from "clause".
(program cl_contains_prop ((phi Bool) (hd Bool) (tl Bool :list))
  (Bool Bool) Bool
  (
   ((cl_contains_prop phi (@cl phi tl)) true)

   ;; { head of list is not phi}
   ((cl_contains_prop phi (@cl hd tl)) (cl_contains_prop phi tl))

   ((cl_contains_prop phi phi) true)

   ;; { hd != phi}
   ((cl_contains_prop phi hd) false)
  )
)

; program: cl_contains_cl
; args:
; - cl_1 Bool: A clause, built with @cl.
; - cl_2 Bool: A clause, built with @cl.
; return: >
;   A boolean indicating if cl_1's disjuncts are also present
;   in cl_2
(program cl_contains_cl ((hd Bool) (tl Bool :list) (cl_2 Bool))
  (Bool Bool) Bool
  (
   ((cl_contains_cl (@cl hd tl) cl_2)
    ;; TODO: I need some way to build boolean values
    ;; combining other boolean values, but I would like
    ;; to avoid built-in operators.
    (eo::and (cl_contains_prop hd cl_2)
             (cl_contains_cl tl cl_2)))

 
   ;; { cl_1 is not a clause built with @cl }
   ((cl_contains_cl hd cl_2)
    (cl_contains_prop hd cl_2))
  )
)

; program: cl_equal
; args:
; - list_1 Bool:
; - list_2 Bool:
; return:
(program cl_equal ((list_1 Bool) (list_2 Bool))
  (Bool Bool) Bool
  (
   ((cl_equal list_1 list_2) (eo::and (cl_contains_cl list_1 list_2)
                                      (cl_contains_cl list_2 list_1)))
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; List computations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; define: index_list
; args:
; - cons (-> A A A): >
;   Right/left assoc. operator used to construct the given cons-list
;   (see definition of f-list, for a given operator f, in ethos
;   manual: https://github.com/cvc5/ethos/blob/main/user_manual.md#list-computations)
; - list (A): A cons-list: a term of the form (cons t1 ... tn)
; - index Int: >
;   An integer, from 0 to the number of parameters - 1 in (cons t1 ... tn) 
;   (i.e., "list)
; return: The parameter number "index" - 1, from (cons t1 ... tn) (i.e., "list")
(program index_list ((A Type) (cons (-> A A A)) (hd A) (tail (-> A A)) (index Int))
  ((-> A A A) A Int) A
  (
   ((index_list cons (cons hd tail) 0) hd)

   ;; { index > 0 }
   ((index_list cons (cons hd tail) index)
    ;; TODO: using eo::add
    (index_list cons tail (eo::add index -1)))
  )
)
