(include "./theory.eo")

;; Library of auxiliary programs, useful to manipulate propositions.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CLAUSES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; program: from_cl
; args:
; - T Bool: A proposition.
; return: >
;   For a unit clause, built with @cl, removes the top @cl if 
;   any, returning the only disjunct. Otherwise, returns T.
(program from_cl ((T Bool))
    (Bool) Bool
    (
        ((from_cl (@cl T)) T)
        ((from_cl T) T)
    )
)

; program: to_cl
; args:
; - T Bool: A proposition.
; return: >
;   Embeds T within a unit clause built with @cl, only
;   if T is not a unit clause built with @cl itself. 
(program to_cl ((T Bool))
    (Bool) Bool
    (
        ((to_cl (@cl T)) (@cl T))
        ((to_cl T) (@cl T))
    )
)


;TODO
; program: contains
; args:
; - inList Bool:
; - phi Bool:
; return:
(program contains ((inList Bool) (phi Bool))
  (Bool Bool) Bool
  (
   ((contains inList phi) true)
  )
)

;TODO true if CL2 is a permuation of CL1
; program: clEqual
; args:
; - CL1 Bool:
; - CL2 Bool:
; return:
(program clEqual ((CL1 Bool) (CL2 Bool))
  (Bool Bool) Bool
  (
   ((clEqual CL1 CL2) true)
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; List computations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; define: index_list
; args:
; - cons (-> A A A): >
;   Right/left assoc. operator used to construct the given cons-list
;   (see definition of f-list, for a given operator f, in ethos
;   manual: https://github.com/cvc5/ethos/blob/main/user_manual.md#list-computations)
; - list (A): A cons-list: a term of the form (cons t1 ... tn)
; - index Int: >
;   An integer, from 0 to the number of parameters - 1 in (cons t1 ... tn) 
;   (i.e., "list)
; return: The parameter number "index" - 1, from (cons t1 ... tn) (i.e., "list")
(program index_list ((A Type) (cons (-> A A A)) (hd A) (tail (-> A A)) (index Int))
  ((-> A A A) A Int) A
  (
   ((index_list cons (cons hd tail) 0) hd)

   ;; { index > 0 }
   ((index_list cons (cons hd tail) index)
    ;; TODO: using eo::add
    (index_list cons tail (eo::add index -1)))
  )
)
